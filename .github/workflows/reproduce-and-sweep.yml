name: reproduce-and-sweep

on:
  workflow_dispatch:
    inputs:
      n_obs:   { description: "number of observations", default: "40" }
      grid:    { description: "grid size",               default: "80" }
      noise:   { description: "observation noise",       default: "0.1" }
      vx:      { description: "flow vx",                 default: "1.0" }
      vy:      { description: "flow vy",                 default: "0.3" }
      seed:    { description: "random seed",             default: "7" }
      lp_list: { description: "lp list (csv)",           default: "20,30,40" }
      lc_list: { description: "lc list (csv)",           default: "6,8,12" }
      alpha_list: { description: "alpha list (csv)",     default: "1e-6,1e-5" }
      trend_list: { description: "use_trend list (csv: true,false)", default: "true,false" }
      os_list: { description: "runner OS list (csv: ubuntu,windows)", default: "ubuntu" }
      max_runs: { description: "cap total combos", default: "24" }
      push_to_artifacts_branch: { description: "push summary to 'artifacts' branch", default: "false" }

permissions:
  contents: write

concurrency:
  group: sweep-${{ github.ref }}
  cancel-in-progress: false

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - name: Build dynamic matrix from CSV inputs
        id: mk
        uses: actions/github-script@v7
        env:
          LP_LIST: ${{ inputs.lp_list }}
          LC_LIST: ${{ inputs.lc_list }}
          ALPHA_LIST: ${{ inputs.alpha_list }}
          TREND_LIST: ${{ inputs.trend_list }}
          OS_LIST: ${{ inputs.os_list }}
          MAX_RUNS: ${{ inputs.max_runs }}
        with:
          script: |
            const csv = (s)=> (s||"").split(",").map(x=>x.trim()).filter(Boolean);
            const normOS = (x)=> (String(x).toLowerCase().startsWith("win") ? "windows-latest" : "ubuntu-latest");
            const lp = csv(process.env.LP_LIST);
            const lc = csv(process.env.LC_LIST);
            const al = csv(process.env.ALPHA_LIST);
            const tr = csv(process.env.TREND_LIST);
            const os = csv(process.env.OS_LIST).map(normOS);
            const cap = Math.max(1, parseInt(process.env.MAX_RUNS||"24", 10));
            const combos = [];
            for (const o of os)
              for (const t of tr)
                for (const a of al)
                  for (const lcc of lc)
                    for (const lpp of lp)
                      combos.push({ os:o, use_trend:["true","1","yes"].includes(String(t).toLowerCase()), alpha:a, lp:lpp, lc:lcc });
            core.setOutput("matrix", JSON.stringify(combos.slice(0, cap)));

  sweep-baseline:
    needs: setup-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    env:
      MPLBACKEND: Agg
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install deps (pin wheels where needed)
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install "shapely>=2,<2.1" || true

      - name: Generate data (with retry)
        run: |
          set -euxo pipefail
          retry() {
            local cmd="$*"
            for i in 1 2 3; do
              echo "::group::Attempt $i: $cmd"
              if eval "$cmd"; then echo "::endgroup::"; return 0; fi
              echo "::warning::Attempt $i failed, retrying..."; sleep 3; echo "::endgroup::"
            done
            echo "::error::All retries failed"; return 1
          }
          retry python scripts/generate_synth.py \
            --n_obs "${{ inputs.n_obs }}" \
            --grid  "${{ inputs.grid  }}" \
            --noise "${{ inputs.noise }}" \
            --vx    "${{ inputs.vx    }}" \
            --vy    "${{ inputs.vy    }}" \
            --seed  "${{ inputs.seed  }}"
          ls -l data || true

      - name: Run baseline (lp=${{ matrix.lp }}, lc=${{ matrix.lc }}, alpha=${{ matrix.alpha }}, trend=${{ matrix.use_trend }})
        run: |
          set -euxo pipefail
          retry() {
            local cmd="$*"
            for i in 1 2 3; do
              echo "::group::Attempt $i: $cmd"
              if eval "$cmd"; then echo "::endgroup::"; return 0; fi
              echo "::warning::Attempt $i failed, retrying..."; sleep 3; echo "::endgroup::"
            done
            echo "::error::All retries failed"; return 1
          }
          TREND_FLAG=""
          if ${{ matrix.use_trend }}; then TREND_FLAG="--use_trend"; fi
          retry python scripts/run_baseline.py \
            --fast_loo ${TREND_FLAG} \
            --length_parallel ${{ matrix.lp }} \
            --length_cross    ${{ matrix.lc }} \
            --alpha           ${{ matrix.alpha }} \
            --no_opt
          mkdir -p sweep/baseline
          P_TR=$([ "${{ matrix.use_trend }}" = "true" ] && echo "tr1" || echo "tr0")
          P_OS="${{ matrix.os }}"
          cp figures/metrics.json "sweep/baseline/metrics_lp${{ matrix.lp }}_lc${{ matrix.lc }}_a${{ matrix.alpha }}_${P_TR}_os-${P_OS}.json"
          cp figures/mean_map.png  "sweep/baseline/mean_lp${{ matrix.lp }}_lc${{ matrix.lc }}_a${{ matrix.alpha }}_${P_TR}_os-${P_OS}.png"
          cp figures/std_map.png   "sweep/baseline/std_lp${{ matrix.lp }}_lc${{ matrix.lc }}_a${{ matrix.alpha }}_${P_TR}_os-${P_OS}.png"

      - name: Upload artifact (this combo)
        uses: actions/upload-artifact@v4
        with:
          name: baseline-lp${{ matrix.lp }}-lc${{ matrix.lc }}-a${{ matrix.alpha }}-tr${{ matrix.use_trend }}-os-${{ matrix.os }}
          if-no-files-found: error
          retention-days: 7
          path: sweep/baseline/*

  physics-soft:
    needs: sweep-baseline
    runs-on: ubuntu-latest
    env:
      MPLBACKEND: Agg
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install deps
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install "shapely>=2,<2.1" || true
      - name: Generate data
        run: |
          set -euxo pipefail
          python scripts/generate_synth.py \
            --n_obs "${{ inputs.n_obs }}" \
            --grid  "${{ inputs.grid  }}" \
            --noise "${{ inputs.noise }}" \
            --vx    "${{ inputs.vx    }}" \
            --vy    "${{ inputs.vy    }}" \
            --seed  "${{ inputs.seed  }}"
      - name: Run physics-soft (MY shoreline + kernel mix + conformal + active sampling)
        run: |
          set -euxo pipefail
          python scripts/run_physics_soft.py --use_trend
          mkdir -p sweep/phys
          cp -f figures/metrics_physics_soft.json sweep/phys/
          cp -f figures/*.png sweep/phys/ || true
          cp -f figures/next_points.csv sweep/phys/ || true
          cp -f data/grid_pred.csv sweep/phys/ || true
          [ -f data/malaysia_barrier.geojson ] && cp -f data/malaysia_barrier.geojson sweep/phys/ || true
      - name: Upload artifact (physics-soft)
        uses: actions/upload-artifact@v4
        with:
          name: physics-soft
          if-no-files-found: warn
          retention-days: 7
          path: sweep/phys/

  aggregate:
    needs: [sweep-baseline, physics-soft]
    runs-on: ubuntu-latest
    env:
      MPLBACKEND: Agg
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install numpy pandas matplotlib
      - name: Download all baseline artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: baseline-*
          path: _dl/baseline
          merge-multiple: true
      - name: Download physics-soft artifact
        uses: actions/download-artifact@v4
        with:
          name: physics-soft
          path: _dl/phys
      - name: Merge metrics + plot heatmaps
        shell: python
        run: |
          import json, re, os, glob
          import numpy as np, pandas as pd, matplotlib.pyplot as plt
          os.makedirs("summary", exist_ok=True)
          rows=[]
          for p in glob.glob("_dl/baseline/metrics_lp*_lc*_a*_*.json"):
              bn=os.path.basename(p)
              m=re.search(r"metrics_lp(\d+)_lc(\d+)_a([^_]+)_(tr[01])_os-(.+)\.json$", bn)
              if not m: 
                  continue
              lp,lc,a,tr,osname=m.groups()
              with open(p,"r",encoding="utf-8") as f: js=json.load(f)
              rows.append({"lp":int(lp),"lc":int(lc),"alpha":a,"trend":1 if tr=='tr1' else 0,"os":osname,
                           "MAE":js.get("MAE"),"RMSE":js.get("RMSE"),"CRPS":js.get("CRPS")})
          df=pd.DataFrame(rows)
          if df.empty: raise SystemExit("no baseline metrics found")
          df.to_csv("summary/baseline_metrics_full.csv", index=False)

          sel=df.sort_values(["alpha","trend","os"]).iloc[0]
          dfh=df[(df["alpha"]==sel["alpha"])&(df["trend"]==sel["trend"])&(df["os"]==sel["os"])]
          def heat(dfv,val,fname):
              piv=dfv.pivot(index="lc",columns="lp",values=val)
              fig=plt.figure()
              im=plt.imshow(piv.values,origin="lower",aspect="auto")
              plt.xticks(range(len(piv.columns)),piv.columns)
              plt.yticks(range(len(piv.index)),piv.index)
              plt.xlabel("length_parallel (lp)")
              plt.ylabel("length_cross (lc)")
              plt.title(f"{val} heatmap (alpha={sel['alpha']}, trend={int(sel['trend'])}, os={sel['os']})")
              plt.colorbar(im)
              for i,lc in enumerate(piv.index):
                  for j,lp in enumerate(piv.columns):
                      v=piv.loc[lc,lp]
                      if pd.notnull(v): plt.text(j,i,f"{v:.3f}",ha="center",va="center",fontsize=8)
              plt.tight_layout(); plt.savefig(f"summary/{fname}",dpi=160); plt.close(fig)
          for k in ["RMSE","MAE","CRPS"]:
              heat(dfh,k,f"baseline_{k.lower()}_heatmap.png")

          for q in ["metrics_physics_soft.json","mean_physics_soft.png","std_map.png","physics_residual.png","variogram.png","next_points.csv","grid_pred.csv","malaysia_barrier.geojson"]:
              for s in glob.glob(os.path.join("_dl/phys", q)):
                  os.system(f'cp "{s}" "summary/{os.path.basename(s)}"')

      - name: Upload sweep summary
        uses: actions/upload-artifact@v4
        with:
          name: sweep-summary
          if-no-files-found: error
          retention-days: 14
          path: summary/

      - name: Push summary to 'artifacts' branch (optional)
        if: ${{ inputs.push_to_artifacts_branch == 'true' }}
        run: |
          set -e
          ts=$(date +'%Y%m%d-%H%M%S')
          out="artifacts/${ts}"
          mkdir -p "${out}"
          cp -r summary/* "${out}/"
          git fetch origin
          if git show-ref --verify --quiet refs/heads/artifacts; then
            git switch artifacts
            git pull --ff-only origin artifacts || true
          else
            git switch --orphan artifacts
            git reset --hard
          fi
          mkdir -p "$(dirname "${out}")"
          cp -r "${GITHUB_WORKSPACE}/${out}" "${out}" -r
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${out}"
          git commit -m "sweep summary ${ts} (baseline heatmaps + physics-soft refs)"
          git push origin HEAD:artifacts
